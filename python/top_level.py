from amaranth import *
from amaranth.lib.wiring import Signature, In, Out, Component
from amaranth.back import verilog
from AXI_interface import *
from APB_interface import *


class TopLevel(Elaboratable):
    def __init__(self, addr_width=32, data_width=32, num_axi_port_in=2, num_axi_port_out=4, num_apb_ports=2):
        self.axi_master_in = [AXIMaster(addr_width=addr_width, data_width=data_width,id_width=4) for _ in range(num_axi_port_in)]
        self.axi_master_out = [AXIMaster(addr_width=addr_width, data_width=data_width, id_width=5) for _ in range(num_axi_port_out)]
        self.apb_master = [APBMaster(addr_width=14, data_width=32) for _ in range(num_apb_ports)]
        self.select_i = Signal(range(num_apb_ports))  # Adjusted to match number of masters
        self.clk = Signal()  # Clock input
        self.rst = Signal()  # Reset input
        self.pwrup_rst_n = Signal()
        self.cpu_rst_n = Signal()
        self.test_rst_n = Signal()
        self.rtc_clk    = Signal()
        self.intr=Signal()
        self.rx = Signal()
        self.tx = Signal()
        self.ev = Signal(3)
        self.spi_clk = Signal()
        self.spi_csn = Signal(4)
        self.spi_sdi = Signal(4)
        self.spi_sdo = Signal(4)
        self.spi_mode = Signal(2)
        
        # CPU core
        self.cpu_core = Instance(
            "scr1_top_axi",
            i_pwrup_rst_n       = self.pwrup_rst_n,
            i_cpu_rst_n         = self.cpu_rst_n,
            i_test_mode         = Signal(),
            i_test_rst_n        = self.test_rst_n,
            i_clk               = self.clk,
            i_rst_n             = self.rst,
            i_rtc_clk           = self.rtc_clk,
            i_fuse_mhartid      = Signal(32),
            i_ext_irq           = Signal(),
            i_soft_irq          = Signal(),
            o_io_axi_imem_awid      = self.axi_master_in[0].awid,
            o_io_axi_imem_awaddr    = self.axi_master_in[0].awaddr,
            o_io_axi_imem_awlen     = self.axi_master_in[0].awlen,
            o_io_axi_imem_awsize    = self.axi_master_in[0].awsize,
            o_io_axi_imem_awburst   = self.axi_master_in[0].awburst,
            o_io_axi_imem_awlock    = self.axi_master_in[0].awlock,
            o_io_axi_imem_awcache   = self.axi_master_in[0].awcache,
            o_io_axi_imem_awprot    = self.axi_master_in[0].awprot,
            o_io_axi_imem_awregion  = self.axi_master_in[0].awregion ,
            o_io_axi_imem_awuser    = self.axi_master_in[0].awuser   ,
            o_io_axi_imem_awqos     = self.axi_master_in[0].awqos    ,
            o_io_axi_imem_awvalid   = self.axi_master_in[0].awvalid  ,
            i_io_axi_imem_awready   = self.axi_master_in[0].awready  ,
            o_io_axi_imem_wdata     = self.axi_master_in[0].wdata    ,
            o_io_axi_imem_wstrb     = self.axi_master_in[0].wstrb    ,
            o_io_axi_imem_wlast     = self.axi_master_in[0].wlast    ,
            o_io_axi_imem_wuser     = self.axi_master_in[0].wuser    ,
            o_io_axi_imem_wvalid    = self.axi_master_in[0].wvalid   ,
            i_io_axi_imem_wready    = self.axi_master_in[0].wready   ,
            i_io_axi_imem_bid       = self.axi_master_in[0].bid      ,
            i_io_axi_imem_bresp     = self.axi_master_in[0].bresp    ,
            i_io_axi_imem_bvalid    = self.axi_master_in[0].bvalid   ,
            i_io_axi_imem_buser     = self.axi_master_in[0].buser    ,
            o_io_axi_imem_bready    = self.axi_master_in[0].bready   ,
            o_io_axi_imem_arid      = self.axi_master_in[0].arid     ,
            o_io_axi_imem_araddr    = self.axi_master_in[0].araddr   ,
            o_io_axi_imem_arlen     = self.axi_master_in[0].arlen    ,
            o_io_axi_imem_arsize    = self.axi_master_in[0].arsize   ,
            o_io_axi_imem_arburst   = self.axi_master_in[0].arburst  ,
            o_io_axi_imem_arlock    = self.axi_master_in[0].arlock   ,
            o_io_axi_imem_arcache   = self.axi_master_in[0].arcache  ,
            o_io_axi_imem_arprot    = self.axi_master_in[0].arprot   ,
            o_io_axi_imem_arregion  = self.axi_master_in[0].arregion ,
            o_io_axi_imem_aruser    = self.axi_master_in[0].aruser   ,
            o_io_axi_imem_arqos     = self.axi_master_in[0].arqos    ,
            o_io_axi_imem_arvalid   = self.axi_master_in[0].arvalid  ,
            i_io_axi_imem_arready   = self.axi_master_in[0].arready  ,
            i_io_axi_imem_rid       = self.axi_master_in[0].rid      ,
            i_io_axi_imem_rdata     = self.axi_master_in[0].rdata    ,
            i_io_axi_imem_rresp     = self.axi_master_in[0].rresp    ,
            i_io_axi_imem_rlast     = self.axi_master_in[0].rlast    ,
            i_io_axi_imem_ruser     = self.axi_master_in[0].ruser    ,
            i_io_axi_imem_rvalid    = self.axi_master_in[0].rvalid   ,
            o_io_axi_imem_rready    = self.axi_master_in[0].rready   ,
            o_io_axi_dmem_awid      = self.axi_master_in[1].awid     ,
            o_io_axi_dmem_awaddr    = self.axi_master_in[1].awaddr   ,
            o_io_axi_dmem_awlen     = self.axi_master_in[1].awlen    ,
            o_io_axi_dmem_awsize    = self.axi_master_in[1].awsize   ,
            o_io_axi_dmem_awburst   = self.axi_master_in[1].awburst  ,
            o_io_axi_dmem_awlock    = self.axi_master_in[1].awlock   ,
            o_io_axi_dmem_awcache   = self.axi_master_in[1].awcache  ,
            o_io_axi_dmem_awprot    = self.axi_master_in[1].awprot   ,
            o_io_axi_dmem_awregion  = self.axi_master_in[1].awregion ,
            o_io_axi_dmem_awuser    = self.axi_master_in[1].awuser   ,
            o_io_axi_dmem_awqos     = self.axi_master_in[1].awqos    ,
            o_io_axi_dmem_awvalid   = self.axi_master_in[1].awvalid  ,
            i_io_axi_dmem_awready   = self.axi_master_in[1].awready  ,
            o_io_axi_dmem_wdata     = self.axi_master_in[1].wdata    ,
            o_io_axi_dmem_wstrb     = self.axi_master_in[1].wstrb    ,
            o_io_axi_dmem_wlast     = self.axi_master_in[1].wlast    ,
            o_io_axi_dmem_wuser     = self.axi_master_in[1].wuser    ,
            o_io_axi_dmem_wvalid    = self.axi_master_in[1].wvalid   ,
            i_io_axi_dmem_wready    = self.axi_master_in[1].wready   ,
            i_io_axi_dmem_bid       = self.axi_master_in[1].bid      ,
            i_io_axi_dmem_bresp     = self.axi_master_in[1].bresp    ,
            i_io_axi_dmem_bvalid    = self.axi_master_in[1].bvalid   ,
            i_io_axi_dmem_buser     = self.axi_master_in[1].buser    ,
            o_io_axi_dmem_bready    = self.axi_master_in[1].bready   ,
            o_io_axi_dmem_arid      = self.axi_master_in[1].arid     ,
            o_io_axi_dmem_araddr    = self.axi_master_in[1].araddr   ,
            o_io_axi_dmem_arlen     = self.axi_master_in[1].arlen    ,
            o_io_axi_dmem_arsize    = self.axi_master_in[1].arsize   ,
            o_io_axi_dmem_arburst   = self.axi_master_in[1].arburst  ,
            o_io_axi_dmem_arlock    = self.axi_master_in[1].arlock   ,
            o_io_axi_dmem_arcache   = self.axi_master_in[1].arcache  ,
            o_io_axi_dmem_arprot    = self.axi_master_in[1].arprot   ,
            o_io_axi_dmem_arregion  = self.axi_master_in[1].arregion ,
            o_io_axi_dmem_aruser    = self.axi_master_in[1].aruser   ,
            o_io_axi_dmem_arqos     = self.axi_master_in[1].arqos    ,
            o_io_axi_dmem_arvalid   = self.axi_master_in[1].arvalid  ,
            i_io_axi_dmem_arready   = self.axi_master_in[1].arready  ,
            i_io_axi_dmem_rid       = self.axi_master_in[1].rid      ,
            i_io_axi_dmem_rdata     = self.axi_master_in[1].rdata    ,
            i_io_axi_dmem_rresp     = self.axi_master_in[1].rresp    ,
            i_io_axi_dmem_rlast     = self.axi_master_in[1].rlast    ,
            i_io_axi_dmem_ruser     = self.axi_master_in[1].ruser    ,
            i_io_axi_dmem_rvalid    = self.axi_master_in[1].rvalid   ,
            o_io_axi_dmem_rready    = self.axi_master_in[1].rready
            
        )
        
        # AXI interconnect
        self.axi_intercon = Instance(
            "axi_intercon",
            i_clk_i             =self.clk,
            i_rst_ni            =self.rst,
            i_i_IFU_awid      =self.axi_master_in[0].awid,
            i_i_IFU_awaddr    =self.axi_master_in[0].awaddr,
            i_i_IFU_awlen     =self.axi_master_in[0].awlen,
            i_i_IFU_awsize    =self.axi_master_in[0].awsize,
            i_i_IFU_awburst   =self.axi_master_in[0].awburst,
            i_i_IFU_awlock    =self.axi_master_in[0].awlock,
            i_i_IFU_awcache   =self.axi_master_in[0].awcache,
            i_i_IFU_awprot    =self.axi_master_in[0].awprot,
            i_i_IFU_awregion  =self.axi_master_in[0].awregion,
            i_i_IFU_awqos     =self.axi_master_in[0].awqos,
            i_i_IFU_awvalid   =self.axi_master_in[0].awvalid,
            o_o_IFU_awready   =self.axi_master_in[0].awready,
            i_i_IFU_arid      =self.axi_master_in[0].arid,
            i_i_IFU_araddr    =self.axi_master_in[0].araddr,
            i_i_IFU_arlen     =self.axi_master_in[0].arlen,
            i_i_IFU_arsize    =self.axi_master_in[0].arsize,
            i_i_IFU_arburst   =self.axi_master_in[0].arburst,
            i_i_IFU_arlock    =self.axi_master_in[0].arlock,
            i_i_IFU_arcache   =self.axi_master_in[0].arcache,
            i_i_IFU_arprot    =self.axi_master_in[0].arprot,
            i_i_IFU_arregion  =self.axi_master_in[0].arregion,
            i_i_IFU_arqos     =self.axi_master_in[0].arqos,
            i_i_IFU_arvalid   =self.axi_master_in[0].arvalid,
            o_o_IFU_arready   =self.axi_master_in[0].arready,
            i_i_IFU_wdata     =self.axi_master_in[0].wdata,
            i_i_IFU_wstrb     =self.axi_master_in[0].wstrb,
            i_i_IFU_wlast     =self.axi_master_in[0].wlast,
            i_i_IFU_wvalid    =self.axi_master_in[0].wvalid,
            o_o_IFU_wready    =self.axi_master_in[0].wready,
            o_o_IFU_bid       =self.axi_master_in[0].bid,
            o_o_IFU_bresp     =self.axi_master_in[0].bresp,
            o_o_IFU_bvalid    =self.axi_master_in[0].bvalid,
            i_i_IFU_bready    =self.axi_master_in[0].bready,
            o_o_IFU_rid       =self.axi_master_in[0].rid,
            o_o_IFU_rdata     =self.axi_master_in[0].rdata,
            o_o_IFU_rresp     =self.axi_master_in[0].rresp,
            o_o_IFU_rlast     =self.axi_master_in[0].rlast,
            o_o_IFU_rvalid    =self.axi_master_in[0].rvalid,
            i_i_IFU_rready    =self.axi_master_in[0].rready,
            
            i_i_LSU_awid      =self.axi_master_in[1].awid,
            i_i_LSU_awaddr    =self.axi_master_in[1].awaddr,
            i_i_LSU_awlen     =self.axi_master_in[1].awlen,
            i_i_LSU_awsize    =self.axi_master_in[1].awsize,
            i_i_LSU_awburst   =self.axi_master_in[1].awburst,
            i_i_LSU_awlock    =self.axi_master_in[1].awlock,
            i_i_LSU_awcache   =self.axi_master_in[1].awcache,
            i_i_LSU_awprot    =self.axi_master_in[1].awprot,
            i_i_LSU_awregion  =self.axi_master_in[1].awregion,
            i_i_LSU_awqos     =self.axi_master_in[1].awqos,
            i_i_LSU_awvalid   =self.axi_master_in[1].awvalid,
            o_o_LSU_awready   =self.axi_master_in[1].awready,
            i_i_LSU_arid      =self.axi_master_in[1].arid,
            i_i_LSU_araddr    =self.axi_master_in[1].araddr,
            i_i_LSU_arlen     =self.axi_master_in[1].arlen,
            i_i_LSU_arsize    =self.axi_master_in[1].arsize,
            i_i_LSU_arburst   =self.axi_master_in[1].arburst,
            i_i_LSU_arlock    =self.axi_master_in[1].arlock,
            i_i_LSU_arcache   =self.axi_master_in[1].arcache,
            i_i_LSU_arprot    =self.axi_master_in[1].arprot,
            i_i_LSU_arregion  =self.axi_master_in[1].arregion,
            i_i_LSU_arqos     =self.axi_master_in[1].arqos,
            i_i_LSU_arvalid   =self.axi_master_in[1].arvalid,
            o_o_LSU_arready   =self.axi_master_in[1].arready,
            i_i_LSU_wdata     =self.axi_master_in[1].wdata,
            i_i_LSU_wstrb     =self.axi_master_in[1].wstrb,
            i_i_LSU_wlast     =self.axi_master_in[1].wlast,
            i_i_LSU_wvalid    =self.axi_master_in[1].wvalid,
            o_o_LSU_wready    =self.axi_master_in[1].wready,
            o_o_LSU_bid       =self.axi_master_in[1].bid,
            o_o_LSU_bresp     =self.axi_master_in[1].bresp,
            o_o_LSU_bvalid    =self.axi_master_in[1].bvalid,
            i_i_LSU_bready    =self.axi_master_in[1].bready,
            o_o_LSU_rid       =self.axi_master_in[1].rid,
            o_o_LSU_rdata     =self.axi_master_in[1].rdata,
            o_o_LSU_rresp     =self.axi_master_in[1].rresp,
            o_o_LSU_rlast     =self.axi_master_in[1].rlast,
            o_o_LSU_rvalid    =self.axi_master_in[1].rvalid,
            i_i_LSU_rready    =self.axi_master_in[1].rready,
        
            o_o_ram_awid      = self.axi_master_out[0].awid,
            o_o_ram_awaddr    = self.axi_master_out[0].awaddr,
            o_o_ram_awlen     = self.axi_master_out[0].awlen,
            o_o_ram_awsize    = self.axi_master_out[0].awsize,
            o_o_ram_awburst   = self.axi_master_out[0].awburst,
            o_o_ram_awlock    = self.axi_master_out[0].awlock,
            o_o_ram_awcache   = self.axi_master_out[0].awcache,
            o_o_ram_awprot    = self.axi_master_out[0].awprot,
            o_o_ram_awregion  = self.axi_master_out[0].awregion,
            o_o_ram_awqos     = self.axi_master_out[0].awqos,
            o_o_ram_awvalid   = self.axi_master_out[0].awvalid,
            i_i_ram_awready   = self.axi_master_out[0].awready,
            o_o_ram_arid      = self.axi_master_out[0].arid,
            o_o_ram_araddr    = self.axi_master_out[0].araddr,
            o_o_ram_arlen     = self.axi_master_out[0].arlen,
            o_o_ram_arsize    = self.axi_master_out[0].arsize,
            o_o_ram_arburst   = self.axi_master_out[0].arburst,
            o_o_ram_arlock    = self.axi_master_out[0].arlock,
            o_o_ram_arcache   = self.axi_master_out[0].arcache,
            o_o_ram_arprot    = self.axi_master_out[0].arprot,
            o_o_ram_arregion  = self.axi_master_out[0].arregion,
            o_o_ram_arqos     = self.axi_master_out[0].arqos,
            o_o_ram_arvalid   = self.axi_master_out[0].arvalid,
            i_i_ram_arready   = self.axi_master_out[0].arready,
            o_o_ram_wdata     = self.axi_master_out[0].wdata,
            o_o_ram_wstrb     = self.axi_master_out[0].wstrb,
            o_o_ram_wlast     = self.axi_master_out[0].wlast,
            o_o_ram_wvalid    = self.axi_master_out[0].wvalid,
            i_i_ram_wready    = self.axi_master_out[0].wready,
            i_i_ram_bid       = self.axi_master_out[0].bid,
            i_i_ram_bresp     = self.axi_master_out[0].bresp,
            i_i_ram_bvalid    = self.axi_master_out[0].bvalid,
            o_o_ram_bready    = self.axi_master_out[0].bready,
            i_i_ram_rid       = self.axi_master_out[0].rid,
            i_i_ram_rdata     = self.axi_master_out[0].rdata,
            i_i_ram_rresp     = self.axi_master_out[0].rresp,
            i_i_ram_rlast     = self.axi_master_out[0].rlast,
            i_i_ram_rvalid    = self.axi_master_out[0].rvalid,
            o_o_ram_rready    = self.axi_master_out[0].rready,
            
            o_o_uart_awid      = self.axi_master_out[1].awid,
            o_o_uart_awaddr    = self.axi_master_out[1].awaddr,
            o_o_uart_awlen     = self.axi_master_out[1].awlen,
            o_o_uart_awsize    = self.axi_master_out[1].awsize,
            o_o_uart_awburst   = self.axi_master_out[1].awburst,
            o_o_uart_awlock    = self.axi_master_out[1].awlock,
            o_o_uart_awcache   = self.axi_master_out[1].awcache,
            o_o_uart_awprot    = self.axi_master_out[1].awprot,
            o_o_uart_awregion  = self.axi_master_out[1].awregion,
            o_o_uart_awqos     = self.axi_master_out[1].awqos,
            o_o_uart_awvalid   = self.axi_master_out[1].awvalid,
            i_i_uart_awready   = self.axi_master_out[1].awready,
            o_o_uart_arid      = self.axi_master_out[1].arid,
            o_o_uart_araddr    = self.axi_master_out[1].araddr,
            o_o_uart_arlen     = self.axi_master_out[1].arlen,
            o_o_uart_arsize    = self.axi_master_out[1].arsize,
            o_o_uart_arburst   = self.axi_master_out[1].arburst,
            o_o_uart_arlock    = self.axi_master_out[1].arlock,
            o_o_uart_arcache   = self.axi_master_out[1].arcache,
            o_o_uart_arprot    = self.axi_master_out[1].arprot,
            o_o_uart_arregion  = self.axi_master_out[1].arregion,
            o_o_uart_arqos     = self.axi_master_out[1].arqos,
            o_o_uart_arvalid   = self.axi_master_out[1].arvalid,
            i_i_uart_arready   = self.axi_master_out[1].arready,
            o_o_uart_wdata     = self.axi_master_out[1].wdata,
            o_o_uart_wstrb     = self.axi_master_out[1].wstrb,
            o_o_uart_wlast     = self.axi_master_out[1].wlast,
            o_o_uart_wvalid    = self.axi_master_out[1].wvalid,
            i_i_uart_wready    = self.axi_master_out[1].wready,
            i_i_uart_bid       = self.axi_master_out[1].bid,
            i_i_uart_bresp     = self.axi_master_out[1].bresp,
            i_i_uart_bvalid    = self.axi_master_out[1].bvalid,
            o_o_uart_bready    = self.axi_master_out[1].bready,
            i_i_uart_rid       = self.axi_master_out[1].rid,
            i_i_uart_rdata     = self.axi_master_out[1].rdata,
            i_i_uart_rresp     = self.axi_master_out[1].rresp,
            i_i_uart_rlast     = self.axi_master_out[1].rlast,
            i_i_uart_rvalid    = self.axi_master_out[1].rvalid,
            o_o_uart_rready    = self.axi_master_out[1].rready,
            
            o_o_spi_awid      = self.axi_master_out[2].awid,
            o_o_spi_awaddr    = self.axi_master_out[2].awaddr,
            o_o_spi_awlen     = self.axi_master_out[2].awlen,
            o_o_spi_awsize    = self.axi_master_out[2].awsize,
            o_o_spi_awburst   = self.axi_master_out[2].awburst,
            o_o_spi_awlock    = self.axi_master_out[2].awlock,
            o_o_spi_awcache   = self.axi_master_out[2].awcache,
            o_o_spi_awprot    = self.axi_master_out[2].awprot,
            o_o_spi_awregion  = self.axi_master_out[2].awregion,
            o_o_spi_awqos     = self.axi_master_out[2].awqos,
            o_o_spi_awvalid   = self.axi_master_out[2].awvalid,
            i_i_spi_awready   = self.axi_master_out[2].awready,
            o_o_spi_arid      = self.axi_master_out[2].arid,
            o_o_spi_araddr    = self.axi_master_out[2].araddr,
            o_o_spi_arlen     = self.axi_master_out[2].arlen,
            o_o_spi_arsize    = self.axi_master_out[2].arsize,
            o_o_spi_arburst   = self.axi_master_out[2].arburst,
            o_o_spi_arlock    = self.axi_master_out[2].arlock,
            o_o_spi_arcache   = self.axi_master_out[2].arcache,
            o_o_spi_arprot    = self.axi_master_out[2].arprot,
            o_o_spi_arregion  = self.axi_master_out[2].arregion,
            o_o_spi_arqos     = self.axi_master_out[2].arqos,
            o_o_spi_arvalid   = self.axi_master_out[2].arvalid,
            i_i_spi_arready   = self.axi_master_out[2].arready,
            o_o_spi_wdata     = self.axi_master_out[2].wdata,
            o_o_spi_wstrb     = self.axi_master_out[2].wstrb,
            o_o_spi_wlast     = self.axi_master_out[2].wlast,
            o_o_spi_wvalid    = self.axi_master_out[2].wvalid,
            i_i_spi_wready    = self.axi_master_out[2].wready,
            i_i_spi_bid       = self.axi_master_out[2].bid,
            i_i_spi_bresp     = self.axi_master_out[2].bresp,
            i_i_spi_bvalid    = self.axi_master_out[2].bvalid,
            o_o_spi_bready    = self.axi_master_out[2].bready,
            i_i_spi_rid       = self.axi_master_out[2].rid,
            i_i_spi_rdata     = self.axi_master_out[2].rdata,
            i_i_spi_rresp     = self.axi_master_out[2].rresp,
            i_i_spi_rlast     = self.axi_master_out[2].rlast,
            i_i_spi_rvalid    = self.axi_master_out[2].rvalid,
            o_o_spi_rready    = self.axi_master_out[2].rready,
            
            o_o_rom_awid      = self.axi_master_out[3].awid,
            o_o_rom_awaddr    = self.axi_master_out[3].awaddr,
            o_o_rom_awlen     = self.axi_master_out[3].awlen,
            o_o_rom_awsize    = self.axi_master_out[3].awsize,
            o_o_rom_awburst   = self.axi_master_out[3].awburst,
            o_o_rom_awlock    = self.axi_master_out[3].awlock,
            o_o_rom_awcache   = self.axi_master_out[3].awcache,
            o_o_rom_awprot    = self.axi_master_out[3].awprot,
            o_o_rom_awregion  = self.axi_master_out[3].awregion,
            o_o_rom_awqos     = self.axi_master_out[3].awqos,
            o_o_rom_awvalid   = self.axi_master_out[3].awvalid,
            i_i_rom_awready   = self.axi_master_out[3].awready,
            o_o_rom_arid      = self.axi_master_out[3].arid,
            o_o_rom_araddr    = self.axi_master_out[3].araddr,
            o_o_rom_arlen     = self.axi_master_out[3].arlen,
            o_o_rom_arsize    = self.axi_master_out[3].arsize,
            o_o_rom_arburst   = self.axi_master_out[3].arburst,
            o_o_rom_arlock    = self.axi_master_out[3].arlock,
            o_o_rom_arcache   = self.axi_master_out[3].arcache,
            o_o_rom_arprot    = self.axi_master_out[3].arprot,
            o_o_rom_arregion  = self.axi_master_out[3].arregion,
            o_o_rom_arqos     = self.axi_master_out[3].arqos,
            o_o_rom_arvalid   = self.axi_master_out[3].arvalid,
            i_i_rom_arready   = self.axi_master_out[3].arready,
            o_o_rom_wdata     = self.axi_master_out[3].wdata,
            o_o_rom_wstrb     = self.axi_master_out[3].wstrb,
            o_o_rom_wlast     = self.axi_master_out[3].wlast,
            o_o_rom_wvalid    = self.axi_master_out[3].wvalid,
            i_i_rom_wready    = self.axi_master_out[3].wready,
            i_i_rom_bid       = self.axi_master_out[3].bid,
            i_i_rom_bresp     = self.axi_master_out[3].bresp,
            i_i_rom_bvalid    = self.axi_master_out[3].bvalid,
            o_o_rom_bready    = self.axi_master_out[3].bready,
            i_i_rom_rid       = self.axi_master_out[3].rid,
            i_i_rom_rdata     = self.axi_master_out[3].rdata,
            i_i_rom_rresp     = self.axi_master_out[3].rresp,
            i_i_rom_rlast     = self.axi_master_out[3].rlast,
            i_i_rom_rvalid    = self.axi_master_out[3].rvalid,
            o_o_rom_rready    = self.axi_master_out[3].rready
        )
        
        # instance of AXI RAM
        self.axi_ram = Instance(
            "axi_ram",  # Name of the Verilog module
            p_MEM_INIT          = "config/RAM.hex",
            p_DATA_WIDTH        = 32,
            p_ADDR_WIDTH        = 32,
            p_ID_WIDTH          = 5,
            i_clk               = self.clk,
            i_rst               = ~self.rst,
            i_s_axi_awid        = self.axi_master_out[0].awid,
            i_s_axi_awaddr      = self.axi_master_out[0].awaddr,
            i_s_axi_awlen       = self.axi_master_out[0].awlen,
            i_s_axi_awsize      = self.axi_master_out[0].awsize,
            i_s_axi_awburst     = self.axi_master_out[0].awburst,
            i_s_axi_awlock      = self.axi_master_out[0].awlock,
            i_s_axi_awcache     = self.axi_master_out[0].awcache,
            i_s_axi_awprot      = self.axi_master_out[0].awprot,
            i_s_axi_awvalid     = self.axi_master_out[0].awvalid,
            o_s_axi_awready     = self.axi_master_out[0].awready,
            i_s_axi_wdata       = self.axi_master_out[0].wdata,
            i_s_axi_wstrb       = self.axi_master_out[0].wstrb,
            i_s_axi_wlast       = self.axi_master_out[0].wlast,
            i_s_axi_wvalid      = self.axi_master_out[0].wvalid,
            o_s_axi_wready      = self.axi_master_out[0].wready,
            o_s_axi_bid         = self.axi_master_out[0].bid,
            o_s_axi_bresp       = self.axi_master_out[0].bresp,
            o_s_axi_bvalid      = self.axi_master_out[0].bvalid,
            i_s_axi_bready      = self.axi_master_out[0].bready,
            i_s_axi_arid        = self.axi_master_out[0].arid,
            i_s_axi_araddr      = self.axi_master_out[0].araddr,
            i_s_axi_arlen       = self.axi_master_out[0].arlen,
            i_s_axi_arsize      = self.axi_master_out[0].arsize, 
            i_s_axi_arburst     = self.axi_master_out[0].arburst,
            i_s_axi_arlock      = self.axi_master_out[0].arlock,
            i_s_axi_arcache     = self.axi_master_out[0].arcache,
            i_s_axi_arprot      = self.axi_master_out[0].arprot,
            i_s_axi_arvalid     = self.axi_master_out[0].arvalid,
            o_s_axi_arready     = self.axi_master_out[0].arready,
            o_s_axi_rid         = self.axi_master_out[0].rid,
            o_s_axi_rdata       = self.axi_master_out[0].rdata,
            o_s_axi_rresp       = self.axi_master_out[0].rresp,
            o_s_axi_rlast       = self.axi_master_out[0].rlast,
            o_s_axi_rvalid      = self.axi_master_out[0].rvalid,
            i_s_axi_rready      = self.axi_master_out[0].rready
        )
        
        # Instance AXI_APB for UART
        self.axi2apb_uart = Instance(
            "axi2apb",
            p_APB_ADDR_WIDTH=14,
            p_AXI4_ID_WIDTH=5,  # ID width set to 1
            p_AXI4_USER_WIDTH=4,
            i_ACLK=self.clk,
            i_ARESETn=self.rst,
            i_test_en_i=Signal(),
            i_AWID_i        =   self.axi_master_out[1].awid,
            i_AWADDR_i      =   self.axi_master_out[1].awaddr,
            i_AWLEN_i       =   self.axi_master_out[1].awlen,
            i_AWSIZE_i      =   self.axi_master_out[1].awsize,
            i_AWBURST_i     =   self.axi_master_out[1].awburst,
            i_AWLOCK_i      =   self.axi_master_out[1].awlock,
            i_AWCACHE_i     =   self.axi_master_out[1].awcache,
            i_AWPROT_i      =   self.axi_master_out[1].awprot,
            i_AWREGION_i    =   self.axi_master_out[1].awregion,
            i_AWUSER_i      =   self.axi_master_out[1].awuser,
            i_AWQOS_i       =   self.axi_master_out[1].awqos,
            i_AWVALID_i     =   self.axi_master_out[1].awvalid,
            o_AWREADY_o     =   self.axi_master_out[1].awready,
            i_WDATA_i       =   self.axi_master_out[1].wdata,
            i_WSTRB_i       =   self.axi_master_out[1].wstrb,
            i_WLAST_i       =   self.axi_master_out[1].wlast,
            i_WUSER_i       =   self.axi_master_out[1].wuser,
            i_WVALID_i      =   self.axi_master_out[1].wvalid,
            o_WREADY_o      =   self.axi_master_out[1].wready,
            o_BID_o         =   self.axi_master_out[1].bid,
            o_BRESP_o       =   self.axi_master_out[1].bresp,
            o_BVALID_o      =   self.axi_master_out[1].bvalid,
            o_BUSER_o       =   self.axi_master_out[1].buser,
            i_BREADY_i      =   self.axi_master_out[1].bready,
            i_ARID_i        =   self.axi_master_out[1].arid,
            i_ARADDR_i      =   self.axi_master_out[1].araddr,
            i_ARLEN_i       =   self.axi_master_out[1].arlen,
            i_ARSIZE_i      =   self.axi_master_out[1].arsize,
            i_ARBURST_i     =   self.axi_master_out[1].arburst,
            i_ARLOCK_i      =   self.axi_master_out[1].arlock,
            i_ARCACHE_i     =   self.axi_master_out[1].arcache,
            i_ARPROT_i      =   self.axi_master_out[1].arprot,
            i_ARREGION_i    =   self.axi_master_out[1].arregion,
            i_ARUSER_i      =   self.axi_master_out[1].aruser,
            i_ARQOS_i       =   self.axi_master_out[1].arqos,
            i_ARVALID_i     =   self.axi_master_out[1].arvalid,
            o_ARREADY_o     =   self.axi_master_out[1].arready,
            o_RID_o         =   self.axi_master_out[1].rid,
            o_RDATA_o       =   self.axi_master_out[1].rdata,
            o_RRESP_o       =   self.axi_master_out[1].rresp,
            o_RLAST_o       =   self.axi_master_out[1].rlast,
            o_RUSER_o       =   self.axi_master_out[1].ruser,
            o_RVALID_o      =   self.axi_master_out[1].rvalid,
            i_RREADY_i      =   self.axi_master_out[1].rready,
            o_PENABLE       =   self.apb_master[0].penable,
            o_PWRITE        =   self.apb_master[0].pwrite,
            o_PADDR         =   self.apb_master[0].paddr,
            o_PSEL          =   self.apb_master[0].psel,
            o_PWDATA        =   self.apb_master[0].pwdata,
            i_PRDATA        =   self.apb_master[0].prdata,
            i_PREADY        =   self.apb_master[0].pready,
            i_PSLVERR       =   self.apb_master[0].pslverr
        )

        # Instance of the APB UART
        self.apb_uart = Instance(
            "apb_uart_sv",  # Name of the Verilog module
            p_APB_ADDR_WIDTH=12,
            i_CLK=self.clk,
            i_RSTN=self.rst,
            i_PADDR=self.apb_master[0].paddr[2:14],
            i_PWDATA=self.apb_master[0].pwdata,
            i_PWRITE=self.apb_master[0].pwrite,
            i_PSEL=self.apb_master[0].psel,
            i_PENABLE=self.apb_master[0].penable,
            o_PRDATA=self.apb_master[0].prdata,
            o_PREADY=self.apb_master[0].pready,
            o_PSLVERR=self.apb_master[0].pslverr,
            i_rx_i=self.rx,
            o_tx_o=self.tx,
            o_event_o=self.ev[0]
        )

        # Instance AXI_APB for SPI
        self.axi2apb_spi = Instance(
            "axi2apb",
            p_APB_ADDR_WIDTH=14,
            p_AXI4_ID_WIDTH=5,  # ID width set to 1
            p_AXI4_USER_WIDTH=4,
            i_ACLK=self.clk,
            i_ARESETn=self.rst,
            i_test_en_i=Signal(),
            i_AWID_i        =   self.axi_master_out[2].awid,
            i_AWADDR_i      =   self.axi_master_out[2].awaddr,
            i_AWLEN_i       =   self.axi_master_out[2].awlen,
            i_AWSIZE_i      =   self.axi_master_out[2].awsize,
            i_AWBURST_i     =   self.axi_master_out[2].awburst,
            i_AWLOCK_i      =   self.axi_master_out[2].awlock,
            i_AWCACHE_i     =   self.axi_master_out[2].awcache,
            i_AWPROT_i      =   self.axi_master_out[2].awprot,
            i_AWREGION_i    =   self.axi_master_out[2].awregion,
            i_AWUSER_i      =   self.axi_master_out[2].awuser,
            i_AWQOS_i       =   self.axi_master_out[2].awqos,
            i_AWVALID_i     =   self.axi_master_out[2].awvalid,
            o_AWREADY_o     =   self.axi_master_out[2].awready,
            i_WDATA_i       =   self.axi_master_out[2].wdata,
            i_WSTRB_i       =   self.axi_master_out[2].wstrb,
            i_WLAST_i       =   self.axi_master_out[2].wlast,
            i_WUSER_i       =   self.axi_master_out[2].wuser,
            i_WVALID_i      =   self.axi_master_out[2].wvalid,
            o_WREADY_o      =   self.axi_master_out[2].wready,
            o_BID_o         =   self.axi_master_out[2].bid,
            o_BRESP_o       =   self.axi_master_out[2].bresp,
            o_BVALID_o      =   self.axi_master_out[2].bvalid,
            o_BUSER_o       =   self.axi_master_out[2].buser,
            i_BREADY_i      =   self.axi_master_out[2].bready,
            i_ARID_i        =   self.axi_master_out[2].arid,
            i_ARADDR_i      =   self.axi_master_out[2].araddr,
            i_ARLEN_i       =   self.axi_master_out[2].arlen,
            i_ARSIZE_i      =   self.axi_master_out[2].arsize,
            i_ARBURST_i     =   self.axi_master_out[2].arburst,
            i_ARLOCK_i      =   self.axi_master_out[2].arlock,
            i_ARCACHE_i     =   self.axi_master_out[2].arcache,
            i_ARPROT_i      =   self.axi_master_out[2].arprot,
            i_ARREGION_i    =   self.axi_master_out[2].arregion,
            i_ARUSER_i      =   self.axi_master_out[2].aruser,
            i_ARQOS_i       =   self.axi_master_out[2].arqos,
            i_ARVALID_i     =   self.axi_master_out[2].arvalid,
            o_ARREADY_o     =   self.axi_master_out[2].arready,
            o_RID_o         =   self.axi_master_out[2].rid,
            o_RDATA_o       =   self.axi_master_out[2].rdata,
            o_RRESP_o       =   self.axi_master_out[2].rresp,
            o_RLAST_o       =   self.axi_master_out[2].rlast,
            o_RUSER_o       =   self.axi_master_out[2].ruser,
            o_RVALID_o      =   self.axi_master_out[2].rvalid,
            i_RREADY_i      =   self.axi_master_out[2].rready,
            o_PENABLE       =   self.apb_master[1].penable,
            o_PWRITE        =   self.apb_master[1].pwrite,
            o_PADDR         =   self.apb_master[1].paddr,
            o_PSEL          =   self.apb_master[1].psel,
            o_PWDATA        =   self.apb_master[1].pwdata,
            i_PRDATA        =   self.apb_master[1].prdata,
            i_PREADY        =   self.apb_master[1].pready,
            i_PSLVERR       =   self.apb_master[1].pslverr
        )

        self.apb_spi_master = Instance(
            "apb_spi_master",
            p_BUFFER_DEPTH=10,
            p_APB_ADDR_WIDTH=12,
            i_HCLK=self.clk,
            i_HRESETn=self.rst,
            i_PADDR=self.apb_master[1].paddr[0:12],
            i_PWDATA=self.apb_master[1].pwdata,
            i_PWRITE=self.apb_master[1].pwrite,
            i_PSEL=self.apb_master[1].psel,
            i_PENABLE=self.apb_master[1].penable,
            o_PRDATA=self.apb_master[1].prdata,
            o_PREADY=self.apb_master[1].pready,
            o_PSLVERR=self.apb_master[1].pslverr,
            o_events_o=self.ev[1:3],
            o_spi_clk=self.spi_clk,
            o_spi_csn0=self.spi_csn[0],
            o_spi_csn1=self.spi_csn[1],
            o_spi_csn2=self.spi_csn[2],
            o_spi_csn3=self.spi_csn[3],
            o_spi_mode=self.spi_mode,
            o_spi_sdo0=self.spi_sdo[0],
            o_spi_sdo1=self.spi_sdo[1],
            o_spi_sdo2=self.spi_sdo[2],
            o_spi_sdo3=self.spi_sdo[3],
            i_spi_sdi0=self.spi_sdi[0],
            i_spi_sdi1=self.spi_sdi[1],
            i_spi_sdi2=self.spi_sdi[2],
            i_spi_sdi3=self.spi_sdi[3]
        )

        # instance of AXI ROM
        self.axi_rom = Instance(
            "axi_ram",  # Name of the Verilog module
            p_MEM_INIT          = "config/RAM.hex",
            p_DATA_WIDTH        = 32,
            p_ADDR_WIDTH        = 32,
            p_ID_WIDTH          = 5,
            i_clk               = self.clk,
            i_rst               = ~self.rst,
            i_s_axi_awid        = self.axi_master_out[3].awid,
            i_s_axi_awaddr      = self.axi_master_out[3].awaddr,
            i_s_axi_awlen       = self.axi_master_out[3].awlen,
            i_s_axi_awsize      = self.axi_master_out[3].awsize,
            i_s_axi_awburst     = self.axi_master_out[3].awburst,
            i_s_axi_awlock      = self.axi_master_out[3].awlock,
            i_s_axi_awcache     = self.axi_master_out[3].awcache,
            i_s_axi_awprot      = self.axi_master_out[3].awprot,
            i_s_axi_awvalid     = self.axi_master_out[3].awvalid,
            o_s_axi_awready     = self.axi_master_out[3].awready,
            i_s_axi_wdata       = self.axi_master_out[3].wdata,
            i_s_axi_wstrb       = self.axi_master_out[3].wstrb,
            i_s_axi_wlast       = self.axi_master_out[3].wlast,
            i_s_axi_wvalid      = self.axi_master_out[3].wvalid,
            o_s_axi_wready      = self.axi_master_out[3].wready,
            o_s_axi_bid         = self.axi_master_out[3].bid,
            o_s_axi_bresp       = self.axi_master_out[3].bresp,
            o_s_axi_bvalid      = self.axi_master_out[3].bvalid,
            i_s_axi_bready      = self.axi_master_out[3].bready,
            i_s_axi_arid        = self.axi_master_out[3].arid,
            i_s_axi_araddr      = self.axi_master_out[3].araddr,
            i_s_axi_arlen       = self.axi_master_out[3].arlen,
            i_s_axi_arsize      = self.axi_master_out[3].arsize, 
            i_s_axi_arburst     = self.axi_master_out[3].arburst,
            i_s_axi_arlock      = self.axi_master_out[3].arlock,
            i_s_axi_arcache     = self.axi_master_out[3].arcache,
            i_s_axi_arprot      = self.axi_master_out[3].arprot,
            i_s_axi_arvalid     = self.axi_master_out[3].arvalid,
            o_s_axi_arready     = self.axi_master_out[3].arready,
            o_s_axi_rid         = self.axi_master_out[3].rid,
            o_s_axi_rdata       = self.axi_master_out[3].rdata,
            o_s_axi_rresp       = self.axi_master_out[3].rresp,
            o_s_axi_rlast       = self.axi_master_out[3].rlast,
            o_s_axi_rvalid      = self.axi_master_out[3].rvalid,
            i_s_axi_rready      = self.axi_master_out[3].rready
        )
    def elaborate(self, platform) -> Module:
        m = Module()
        # Add the Verilog instances
        m.submodules.apb_uart       = self.apb_uart
        m.submodules.apb_spi_master = self.apb_spi_master
        m.submodules.axi2apb_spi    = self.axi2apb_spi
        m.submodules.axi2apb_uart   = self.axi2apb_uart
        m.submodules.axi_intercon   = self.axi_intercon
        m.submodules.axi_ram        = self.axi_ram
        m.submodules.axi_rom        = self.axi_rom
        m.submodules.cpu_core       = self.cpu_core

        return m

# Generate the combined Verilog code
if __name__ == "__main__":
    top = TopLevel(addr_width=32, data_width=32, num_axi_port_in=2, num_axi_port_out=4)

    # Flatten the ports to ensure they are correctly passed
    verilog_code = verilog.convert(
        top,
        ports=[
            top.pwrup_rst_n, top.cpu_rst_n, top.test_rst_n, top.rst, top.clk, top.rtc_clk,  top.intr,
            top.rx, top.tx, top.ev,
            top.spi_clk, top.spi_csn, top.spi_sdi, top.spi_sdo, top.spi_mode
        ]
    )

    with open("SoC/top.sv", "w") as f:
        f.write(verilog_code)
    print("Generated SoC_AR.sv with bundled APB signals.")
